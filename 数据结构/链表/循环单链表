# 1.定义一个节点
class Node(object):

    def __init__(self, elem):
        self.elem = elem
        self.next = None


# 2.定义循环单链表
class SingleClist(object):

    def __init__(self):
        self.__head = None

    def is_empty(self):
        """判断空"""
        return self.__head == None  # 回空

    def get_length(self):
        """获得长度"""

        # 1.是否为空链表
        if self.is_empty():
            return 0

        # 2.开始遍历整个单链表
        count = 1
        cur = self.__head
        while cur.next != self.__head:  # 找到循环链表的头部

            count += 1
            cur = cur.next

        return count

    def travel(self):
        """遍历整个链表"""

        # 1.单链表为空的情况
        if self.is_empty():
            print("单链表为空！")
            return

        # 2.找到单链表的尾部
        cur = self.__head
        while cur.next != self.__head:
            print(cur.elem, end=" ")
            cur = cur.next

        # 3.最后一个节点的数据的获取
        print(cur.elem)

    def add(self, elem):
        """头插法"""

        # 1.申请一个节点
        node = Node(elem)

        # 2.判断列表是否为空
        if self.is_empty():

            self.__head = node
            node.next = self.__head  # 构建头尾互联的节点
        else:

            # 2.1找到整个单链表的尾部
            cur = self.__head
            while cur.next != self.__head:
                cur = cur.next

            # 2.2头部插入node节点
            node.next = self.__head  # 连接
            cur.next = node  # 头尾互联
            self.__head = node  # 重新找到头结点

    def append(self, elem):
        """尾插法"""

        # 1.申请节点
        node = Node(elem)

        # 2.找到是否为空
        if self.is_empty():
            self.__head = node
            node.next = self.__head
        else:
            # 2.1遍历数据节点
            cur = self.__head
            while cur.next != self.__head:
                cur = cur.next
            # 2.2找到最后一个节点插入元素
            cur.next = node
            node.next = self.__head

    def insert(self, pos, elem):
        """
        插入元素
        :param pos:位置
        :param elem:元素
        :return:0
        """

        # 1.如果是是开头
        if pos <= 0:
            self.add(elem)
        # 2.如果是结尾
        elif pos > (self.get_length() - 1):
            self.append(elem)
        # 3.如果是中间
        else:
            # 3.1申请一个节点
            node = Node(elem)
            # 3.2找到插入位置
            cur = self.__head
            while pos:
                pos -= 1
                cur = cur.next
            # 3.3插入节点
            node.next = cur.next
            cur.next = node

    def remove(self, elem):
        """删除指定元素的节点"""

        # 1.如果链表为空直接返回
        if self.is_empty():
            return

        cur = self.__head
        pre = None  # 用来保存上一个节点
        # 2判断首节点的问题
        if cur.elem == elem:
            # 第一个元素就找到了删除的元素节点
            if cur.next != self.__head:
                # 1.找到尾部的节点
                while cur.next != self.__head:
                    cur = cur.next
                # 2.删除节点
                self.__head = self.__head.next
                cur.next = self.__head
            else:
                # 只有一个头结点
                self.__head = None
        else:
            # 不是第一个元素
            pre = self.__head

            # 遍历整个链表 找到节点
            while cur.next != self.__head:

                if cur.elem == elem:
                    pre.next = cur.next
                    return

                else:
                    pre = cur  # 前后异步实现删除
                    cur = cur.next
            # 在尾部找到了元素
            if cur.elem == elem:
                pre.next = cur.next#实现循环 or pre.next = self.__head


if __name__ == "__main__":
    list1 = SingleClist()
    list1.add(12)
    list1.add(45)
    list1.remove(45)
    list1.remove(12)

    list1.travel()

